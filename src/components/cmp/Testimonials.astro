---
const { node } = Astro.props;
---

<div
  class="testimonial-slideshow slideshow slideshow--transition-slide js-slideshow"
  data-swipe="on">
  <p class="sr-only">Carrousel de témoignages client</p>

  <ul class="slideshow__content">
    {
      node.testimonials &&
        node.testimonials.map((item) => (
          <li class="slideshow__item text-center js-slideshow__item">
            <div class="w-[calc(100%_-_2.5rem)] lg:w-[calc(100%_-_4rem)] mx-auto max-w-3xl">
              <blockquote class="text-lg lg:text-3xl leading-snug lg:leading-snug">
                <div class="text-ellipsis line-clamp-4 overflow-hidden">
                  &#34;{item.quote}&#34;
                </div>
              </blockquote>

              <footer class="mt-5 lg:mt-8">
                <cite class="text-sm lg:text-base">
                  <strong class="not-italic leading-tight">{item.name}</strong>
                  <span class="not-italic block mt-0.5 lg:mt-1 leading-tight">
                    {item.job}
                  </span>
                </cite>
              </footer>
            </div>
          </li>
        ))
    }
  </ul>

  <ul>
    <li class="slideshow__control js-slideshow__control">
      <button class="slideshow__btn js-tab-focus relative">
        <svg
          class="icon h-[1.6em] w-[1.6em] inline-block text-inherit fill-current leading-none shrink-0"
          viewBox="0 0 32 32">
          <title>Précédent</title><path
            d="M20.768,31.395L10.186,16.581c-0.248-0.348-0.248-0.814,0-1.162L20.768,0.605l1.627,1.162L12.229,16 l10.166,14.232L20.768,31.395z">
          </path>
        </svg>
      </button>
    </li>

    <li class="slideshow__control js-slideshow__control">
      <button class="slideshow__btn js-tab-focus">
        <svg
          class="icon h-[1.6em] w-[1.6em] inline-block text-inherit fill-current leading-none shrink-0"
          viewBox="0 0 32 32">
          <title>Suivant</title><path
            d="M11.232,31.395l-1.627-1.162L19.771,16L9.605,1.768l1.627-1.162l10.582,14.813 c0.248,0.348,0.248,0.814,0,1.162L11.232,31.395z">
          </path>
        </svg>
      </button>
    </li>
  </ul>
</div>

<style>
  /* --------------------------------

File#: _1_swipe-content
Title: Swipe Content
Descr: A Vanilla JavaScript plugin to detect touch interactions
Usage: codyhouse.co/license

-------------------------------- */
  .swipe-content {
    height: 280px;
    width: 280px;
    @apply bg-gray-400;
    @apply rounded;
    cursor: default;
    transition: background 0.2s;
  }
  .swipe-content:active {
    @apply bg-gray-500;
  }
  /* --------------------------------

File#: _2_slideshow
Title: Slideshow
Descr: Show a collection of items one at a time
Usage: codyhouse.co/license

-------------------------------- */
  :root {
    --slideshow-height: 280px;
    --slideshow-fade-transition-duration: 0.25s;
    --slideshow-slide-transition-duration: 0.35s;
    --slideshow-prx-transition-duration: 0.5s;
    --slideshow-btn-width: 1.6em;
    --slideshow-btn-height: 3.2em;
    --slideshow-btn-icon-size: 1.6em;
    --slideshow-btn-offset: 0.5rem;
  }
  @media (min-width: 48rem) {
    :root {
      --slideshow-height: 380px;
    }
  }
  @media (min-width: 64rem) {
    :root {
      --slideshow-height: 480px;
      --slideshow-btn-offset: 0.75rem;
    }
  }
  @media (min-width: 80rem) {
    :root {
      --slideshow-height: 580px;
    }
  }

  .slideshow__item {
    display: flex;
    align-items: center;
    justify-content: center;
    height: var(--slideshow-height);
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
  }
  .slideshow__item:focus {
    outline: none;
  }

  .slideshow--ratio-16\:9 .slideshow__item {
    height: 0;
    padding-bottom: 56.25%;
  }

  .slideshow--ratio-4\:3 .slideshow__item {
    height: 0;
    padding-bottom: 75%;
  }

  .slideshow--ratio-1\:1 .slideshow__item {
    height: 0;
    padding-bottom: 100%;
  }

  .slideshow {
    position: relative;
    z-index: 1;
    overflow: hidden;
  }
  .slideshow__content {
    overflow: hidden;
  }
  .slideshow__item {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    width: 100%;
    visibility: hidden;
  }
  .slideshow__item--selected {
    position: relative;
    z-index: 3;
    visibility: visible;
  }

  .slideshow--transition-fade .slideshow__item {
    opacity: 0;
    transition:
      opacity 0s var(--slideshow-fade-transition-duration),
      visibility 0s var(--slideshow-fade-transition-duration);
  }
  .slideshow--transition-fade .slideshow__item--selected {
    opacity: 1;
    transition: opacity var(--slideshow-fade-transition-duration);
  }

  .slideshow--transition-slide .slideshow__item {
    animation-duration: var(--slideshow-slide-transition-duration);
    animation-fill-mode: forwards;
    animation-fill-mode: forwards;
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .slideshow--transition-slide .slideshow__item > * {
    visibility: hidden;
  }
  .slideshow--transition-slide
    .slideshow__item:not(.slideshow__item--selected)
    * {
    transition: none;
  }
  .slideshow--transition-slide .slideshow__item--selected > * {
    visibility: visible;
  }
  .slideshow--transition-slide .slideshow__item--slide-in-left {
    animation-name: slide-in-left;
  }
  .slideshow--transition-slide .slideshow__item--slide-in-right {
    animation-name: slide-in-right;
  }
  .slideshow--transition-slide .slideshow__item--slide-out-left {
    animation-name: slide-out-left;
  }
  .slideshow--transition-slide .slideshow__item--slide-out-right {
    animation-name: slide-out-right;
  }
  .slideshow--transition-slide .slideshow__item--slide-out-left,
  .slideshow--transition-slide .slideshow__item--slide-out-right {
    z-index: 2;
  }
  .slideshow--transition-slide
    .slideshow__item--slide-out-left.slideshow__item--selected,
  .slideshow--transition-slide
    .slideshow__item--slide-out-right.slideshow__item--selected {
    z-index: 3;
  }
  .slideshow--transition-slide .slideshow__item--slide-out-left > *,
  .slideshow--transition-slide .slideshow__item--slide-out-right > * {
    visibility: visible;
  }

  @keyframes slide-in-left {
    0% {
      visibility: visible;
      -webkit-transform: translateX(-100%);
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(0);
    }
  }
  @keyframes slide-in-right {
    0% {
      visibility: visible;
      -webkit-transform: translateX(100%);
      transform: translateX(100%);
    }
    100% {
      transform: translateX(0);
    }
  }
  @keyframes slide-out-left {
    0% {
      visibility: visible;
      transform: translateX(0);
    }
    100% {
      -webkit-transform: translateX(100%);
      transform: translateX(100%);
    }
  }
  @keyframes slide-out-right {
    0% {
      visibility: visible;
      transform: translateX(0);
    }
    100% {
      -webkit-transform: translateX(-100%);
      transform: translateX(-100%);
    }
  }
  .slideshow--transition-prx .slideshow__item {
    animation-duration: var(--slideshow-prx-transition-duration);
    animation-fill-mode: forwards;
    animation-fill-mode: forwards;
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .slideshow--transition-prx .slideshow__item > * {
    visibility: hidden;
  }
  .slideshow--transition-prx .slideshow__item--selected > * {
    visibility: visible;
  }
  .slideshow--transition-prx .slideshow__item--prx-in-left {
    -webkit-animation-name: prx-in-left;
    animation-name: prx-in-left;
  }
  .slideshow--transition-prx .slideshow__item--prx-in-right {
    -webkit-animation-name: prx-in-right;
    animation-name: prx-in-right;
  }
  .slideshow--transition-prx .slideshow__item--prx-out-left {
    -webkit-animation-name: prx-out-left;
    animation-name: prx-out-left;
  }
  .slideshow--transition-prx .slideshow__item--prx-out-right {
    -webkit-animation-name: prx-out-right;
    animation-name: prx-out-right;
  }
  .slideshow--transition-prx .slideshow__item--prx-out-left,
  .slideshow--transition-prx .slideshow__item--prx-out-right {
    z-index: 2;
  }
  .slideshow--transition-prx
    .slideshow__item--prx-out-left.slideshow__item--selected,
  .slideshow--transition-prx
    .slideshow__item--prx-out-right.slideshow__item--selected {
    z-index: 3;
  }
  .slideshow--transition-prx .slideshow__item--prx-out-left > *,
  .slideshow--transition-prx .slideshow__item--prx-out-right > * {
    visibility: visible;
  }

  @keyframes prx-in-left {
    0% {
      visibility: visible;
      -webkit-transform: translateX(-100%);
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(0);
    }
  }
  @keyframes prx-in-right {
    0% {
      visibility: visible;
      -webkit-transform: translateX(100%);
      transform: translateX(100%);
    }
    100% {
      transform: translateX(0);
    }
  }
  @keyframes prx-out-left {
    0% {
      opacity: 1;
      visibility: visible;
      transform: translateX(0);
    }
    100% {
      opacity: 0.3;
      -webkit-transform: translateX(40%);
      transform: translateX(40%);
    }
  }
  @keyframes prx-out-right {
    0% {
      opacity: 1;
      visibility: visible;
      transform: translateX(0);
    }
    100% {
      opacity: 0.3;
      -webkit-transform: translateX(-40%);
      transform: translateX(-40%);
    }
  }
  .slideshow[data-swipe="on"] .slideshow__content {
    user-select: none;
  }
  .slideshow[data-swipe="on"] .slideshow__content img {
    pointer-events: none;
  }

  .slideshow__control {
    display: none;
  }

  .slideshow[data-controls="hover"] .slideshow__control {
    opacity: 0;
    transition: opacity 0.3s;
  }
  .slideshow[data-controls="hover"]:hover .slideshow__control {
    opacity: 1;
  }
  .slideshow[data-swipe="on"] .slideshow__control {
    display: none;
  }
  .slideshow__control {
    display: block;
    position: absolute;
    z-index: 4;
    top: 50%;
    transform: translateY(-50%);
  }
  .slideshow__control:first-of-type {
    left: var(--slideshow-btn-offset);
  }
  .slideshow__control:last-of-type {
    right: var(--slideshow-btn-offset);
  }
  @media (min-width: 64rem) {
    .slideshow[data-swipe="on"] .slideshow__control {
      display: block;
    }
  }

  .slideshow__btn {
    display: block;
    @apply bg-gray-900/75;
    height: var(--slideshow-btn-height);
    width: var(--slideshow-btn-width);
    @apply rounded;
    cursor: pointer;
    transition:
      background 0.2s,
      -webkit-transform 0.2s;
    transition:
      background 0.2s,
      transform 0.2s;
    transition:
      background 0.2s,
      transform 0.2s,
      -webkit-transform 0.2s;
  }
  .slideshow__btn:hover {
    @apply bg-gray-900/[.85];
  }
  .slideshow__btn:hover .icon {
    @apply text-white;
  }
  .slideshow:not(.slideshow--is-animating) .slideshow__btn:active {
    transform: translateY(2px);
  }
  .slideshow__btn .icon {
    display: block;
    width: var(--slideshow-btn-icon-size);
    height: var(--slideshow-btn-icon-size);
    margin: 0 auto;
    transition: color 0.2s;
    @apply text-white;
  }
  @supports (grid-area: auto) {
    .slideshow__btn {
      background-color: transparent;
    }
    .slideshow__btn .icon {
      @apply text-gray-900;
    }
  }

  .slideshow__navigation {
    position: absolute;
    z-index: 4;
    bottom: 0;
    width: 100%;
    height: 32px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: transparent;
  }

  .slideshow__nav-item {
    display: inline-block;
    @apply my-0 mx-1 lg:mx-1.5;
  }
  .slideshow__nav-item button {
    display: block;
    position: relative;
    font-size: 8px;
    @apply text-gray-700;
    height: 1em;
    width: 1em;
    border-radius: 50%;
    background-color: currentColor;
    opacity: 0.4;
    cursor: pointer;
    transition: background 0.3s;
  }
  .slideshow__nav-item button::before {
    content: "";
    position: absolute;
    top: calc(50% - 0.5em);
    left: calc(50% - 0.5em);
    height: 1em;
    width: 1em;
    font-size: 14px;
    border-radius: inherit;
    @apply border border-gray-700;
    opacity: 0;
    transform: scale(0);
    transition: 0.3s;
  }
  .slideshow__nav-item button:focus {
    outline: none;
  }
  .slideshow__nav-item button:focus::before {
    opacity: 1;
    transform: scale(1);
  }

  .slideshow__nav-item--selected button {
    opacity: 1;
  }

  @media (min-width: 64rem) {
    .slideshow__navigation {
      height: 40px;
    }

    .slideshow__nav-item button {
      font-size: 10px;
    }
    .slideshow__nav-item button::before {
      font-size: 16px;
    }
  }
  /* --------------------------------

File#: _3_testimonial-slideshow
Title: Testimonial Slideshow
Descr: A Slideshow to display a gallery of testimonials
Usage: codyhouse.co/license

-------------------------------- */
  :root {
    --testimonial-slideshow-profile-img-size: 48px;
  }
  @media (min-width: 64rem) {
    :root {
      --testimonial-slideshow-profile-img-size: 64px;
    }
  }

  .testimonial-slideshow {
    --slideshow-height: 320px;
  }
  @media (min-width: 64rem) {
    .testimonial-slideshow {
      --slideshow-height: 420px;
    }
  }

  .testimonial-slideshow__profile-img {
    width: var(--testimonial-slideshow-profile-img-size);
    height: var(--testimonial-slideshow-profile-img-size);
    overflow: hidden;
  }
  .testimonial-slideshow__profile-img img {
    display: block;
    width: 100%;
  }
</style>

<script>
  if (!Util) function Util() {}

  Util.hasClass = function (el, className) {
    return el.classList.contains(className);
  };

  Util.addClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.add(classList[0]);
    if (classList.length > 1) Util.addClass(el, classList.slice(1).join(" "));
  };

  Util.removeClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.remove(classList[0]);
    if (classList.length > 1)
      Util.removeClass(el, classList.slice(1).join(" "));
  };

  Util.setAttributes = function (el, attrs) {
    for (var key in attrs) {
      el.setAttribute(key, attrs[key]);
    }
  };

  Util.moveFocus = function (element) {
    if (!element) element = document.getElementsByTagName("body")[0];
    element.focus();
    if (document.activeElement !== element) {
      element.setAttribute("tabindex", "-1");
      element.focus();
    }
  };

  Util.getIndexInArray = function (array, el) {
    return Array.prototype.indexOf.call(array, el);
  };

  Util.cssSupports = function (property, value) {
    return CSS.supports(property, value);
  };

  Util.extend = function () {
    var extended = {};
    var deep = false;
    var i = 0;
    var length = arguments.length;

    if (Object.prototype.toString.call(arguments[0]) === "[object Boolean]") {
      deep = arguments[0];
      i++;
    }

    var merge = function (obj) {
      for (var prop in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, prop)) {
          if (
            deep &&
            Object.prototype.toString.call(obj[prop]) === "[object Object]"
          ) {
            extended[prop] = extend(true, extended[prop], obj[prop]);
          } else {
            extended[prop] = obj[prop];
          }
        }
      }
    };

    for (; i < length; i++) {
      var obj = arguments[i];
      merge(obj);
    }

    return extended;
  };
  // File#: _1_swipe-content
  (function () {
    var SwipeContent = function (element) {
      this.element = element;
      this.delta = [false, false];
      this.dragging = false;
      this.intervalId = false;
      initSwipeContent(this);
    };

    function initSwipeContent(content) {
      content.element.addEventListener("mousedown", handleEvent.bind(content));
      content.element.addEventListener(
        "touchstart",
        handleEvent.bind(content),
        { passive: true },
      );
    }

    function initDragging(content) {
      //add event listeners
      content.element.addEventListener("mousemove", handleEvent.bind(content));
      content.element.addEventListener("touchmove", handleEvent.bind(content), {
        passive: true,
      });
      content.element.addEventListener("mouseup", handleEvent.bind(content));
      content.element.addEventListener("mouseleave", handleEvent.bind(content));
      content.element.addEventListener("touchend", handleEvent.bind(content));
    }

    function cancelDragging(content) {
      //remove event listeners
      if (content.intervalId) {
        !window.requestAnimationFrame
          ? clearInterval(content.intervalId)
          : window.cancelAnimationFrame(content.intervalId);
        content.intervalId = false;
      }
      content.element.removeEventListener(
        "mousemove",
        handleEvent.bind(content),
      );
      content.element.removeEventListener(
        "touchmove",
        handleEvent.bind(content),
      );
      content.element.removeEventListener("mouseup", handleEvent.bind(content));
      content.element.removeEventListener(
        "mouseleave",
        handleEvent.bind(content),
      );
      content.element.removeEventListener(
        "touchend",
        handleEvent.bind(content),
      );
    }

    function handleEvent(event) {
      switch (event.type) {
        case "mousedown":
        case "touchstart":
          startDrag(this, event);
          break;
        case "mousemove":
        case "touchmove":
          drag(this, event);
          break;
        case "mouseup":
        case "mouseleave":
        case "touchend":
          endDrag(this, event);
          break;
      }
    }

    function startDrag(content, event) {
      content.dragging = true;
      // listen to drag movements
      initDragging(content);
      content.delta = [
        parseInt(unify(event).clientX),
        parseInt(unify(event).clientY),
      ];
      // emit drag start event
      emitSwipeEvents(content, "dragStart", content.delta, event.target);
    }

    function endDrag(content, event) {
      cancelDragging(content);
      // credits: https://css-tricks.com/simple-swipe-with-vanilla-javascript/
      var dx = parseInt(unify(event).clientX),
        dy = parseInt(unify(event).clientY);

      // check if there was a left/right swipe
      if (content.delta && (content.delta[0] || content.delta[0] === 0)) {
        var s = getSign(dx - content.delta[0]);

        if (Math.abs(dx - content.delta[0]) > 30) {
          s < 0
            ? emitSwipeEvents(content, "swipeLeft", [dx, dy])
            : emitSwipeEvents(content, "swipeRight", [dx, dy]);
        }

        content.delta[0] = false;
      }
      // check if there was a top/bottom swipe
      if (content.delta && (content.delta[1] || content.delta[1] === 0)) {
        var y = getSign(dy - content.delta[1]);

        if (Math.abs(dy - content.delta[1]) > 30) {
          y < 0
            ? emitSwipeEvents(content, "swipeUp", [dx, dy])
            : emitSwipeEvents(content, "swipeDown", [dx, dy]);
        }

        content.delta[1] = false;
      }
      // emit drag end event
      emitSwipeEvents(content, "dragEnd", [dx, dy]);
      content.dragging = false;
    }

    function drag(content, event) {
      if (!content.dragging) return;
      // emit dragging event with coordinates
      !window.requestAnimationFrame
        ? (content.intervalId = setTimeout(function () {
            emitDrag.bind(content, event);
          }, 250))
        : (content.intervalId = window.requestAnimationFrame(
            emitDrag.bind(content, event),
          ));
    }

    function emitDrag(event) {
      emitSwipeEvents(this, "dragging", [
        parseInt(unify(event).clientX),
        parseInt(unify(event).clientY),
      ]);
    }

    function unify(event) {
      // unify mouse and touch events
      return event.changedTouches ? event.changedTouches[0] : event;
    }

    function emitSwipeEvents(content, eventName, detail, el) {
      var trigger = false;
      if (el) trigger = el;
      // emit event with coordinates
      var event = new CustomEvent(eventName, {
        detail: { x: detail[0], y: detail[1], origin: trigger },
      });
      content.element.dispatchEvent(event);
    }

    function getSign(x) {
      if (!Math.sign) {
        return (x > 0) - (x < 0) || +x;
      } else {
        return Math.sign(x);
      }
    }

    window.SwipeContent = SwipeContent;

    //initialize the SwipeContent objects
    var swipe = document.getElementsByClassName("js-swipe-content");
    if (swipe.length > 0) {
      for (var i = 0; i < swipe.length; i++) {
        (function (i) {
          new SwipeContent(swipe[i]);
        })(i);
      }
    }
  })();

  // File#: _2_slideshow
  // Usage: codyhouse.co/license
  (function () {
    var Slideshow = function (opts) {
      this.options = Util.extend(Slideshow.defaults, opts);
      this.element = this.options.element;
      this.items = this.element.getElementsByClassName("js-slideshow__item");
      this.controls = this.element.getElementsByClassName(
        "js-slideshow__control",
      );
      this.selectedSlide = 0;
      this.autoplayId = false;
      this.autoplayPaused = false;
      this.navigation = false;
      this.navCurrentLabel = false;
      this.ariaLive = false;
      this.moveFocus = false;
      this.animating = false;
      this.supportAnimation = Util.cssSupports("transition");
      this.animationOff =
        !Util.hasClass(this.element, "slideshow--transition-fade") &&
        !Util.hasClass(this.element, "slideshow--transition-slide") &&
        !Util.hasClass(this.element, "slideshow--transition-prx");
      this.animationType = Util.hasClass(
        this.element,
        "slideshow--transition-prx",
      )
        ? "prx"
        : "slide";
      this.animatingClass = "slideshow--is-animating";
      initSlideshow(this);
      initSlideshowEvents(this);
      initAnimationEndEvents(this);
    };

    Slideshow.prototype.showNext = function () {
      showNewItem(this, this.selectedSlide + 1, "next");
    };

    Slideshow.prototype.showPrev = function () {
      showNewItem(this, this.selectedSlide - 1, "prev");
    };

    Slideshow.prototype.showItem = function (index) {
      showNewItem(this, index, false);
    };

    Slideshow.prototype.startAutoplay = function () {
      var self = this;
      if (this.options.autoplay && !this.autoplayId && !this.autoplayPaused) {
        self.autoplayId = setInterval(function () {
          self.showNext();
        }, self.options.autoplayInterval);
      }
    };

    Slideshow.prototype.pauseAutoplay = function () {
      var self = this;
      if (this.options.autoplay) {
        clearInterval(self.autoplayId);
        self.autoplayId = false;
      }
    };

    function initSlideshow(slideshow) {
      // basic slideshow settings
      // if no slide has been selected -> select the first one
      if (
        slideshow.element.getElementsByClassName("slideshow__item--selected")
          .length < 1
      )
        Util.addClass(slideshow.items[0], "slideshow__item--selected");
      slideshow.selectedSlide = Util.getIndexInArray(
        slideshow.items,
        slideshow.element.getElementsByClassName(
          "slideshow__item--selected",
        )[0],
      );
      // create an element that will be used to announce the new visible slide to SR
      var srLiveArea = document.createElement("div");
      Util.setAttributes(srLiveArea, {
        class: "sr-only js-slideshow__aria-live",
        "aria-live": "polite",
        "aria-atomic": "true",
      });
      slideshow.element.appendChild(srLiveArea);
      slideshow.ariaLive = srLiveArea;
    }

    function initSlideshowEvents(slideshow) {
      // if slideshow navigation is on -> create navigation HTML and add event listeners
      if (slideshow.options.navigation) {
        // check if navigation has already been included
        if (
          slideshow.element.getElementsByClassName("js-slideshow__navigation")
            .length == 0
        ) {
          var navigation = document.createElement("ol"),
            navChildren = "";

          var navClasses =
            slideshow.options.navigationClass + " js-slideshow__navigation";
          if (slideshow.items.length <= 1) {
            navClasses = navClasses + " hidden";
          }

          navigation.setAttribute("class", navClasses);
          for (var i = 0; i < slideshow.items.length; i++) {
            var className =
                i == slideshow.selectedSlide
                  ? 'class="' +
                    slideshow.options.navigationItemClass +
                    " " +
                    slideshow.options.navigationItemClass +
                    '--selected js-slideshow__nav-item"'
                  : 'class="' +
                    slideshow.options.navigationItemClass +
                    ' js-slideshow__nav-item"',
              navCurrentLabel =
                i == slideshow.selectedSlide
                  ? '<span class="sr-only js-slideshow__nav-current-label">Current Item</span>'
                  : "";
            navChildren =
              navChildren +
              "<li " +
              className +
              '><button class="reset"><span class="sr-only">' +
              (i + 1) +
              "</span>" +
              navCurrentLabel +
              "</button></li>";
          }
          navigation.innerHTML = navChildren;
          slideshow.element.appendChild(navigation);
        }

        slideshow.navCurrentLabel = slideshow.element.getElementsByClassName(
          "js-slideshow__nav-current-label",
        )[0];
        slideshow.navigation = slideshow.element.getElementsByClassName(
          "js-slideshow__nav-item",
        );

        var dotsNavigation = slideshow.element.getElementsByClassName(
          "js-slideshow__navigation",
        )[0];

        dotsNavigation.addEventListener("click", function (event) {
          navigateSlide(slideshow, event, true);
        });
        dotsNavigation.addEventListener("keyup", function (event) {
          navigateSlide(slideshow, event, event.key.toLowerCase() == "enter");
        });
      }
      // slideshow arrow controls
      if (slideshow.controls.length > 0) {
        // hide controls if one item available
        if (slideshow.items.length <= 1) {
          Util.addClass(slideshow.controls[0], "hidden");
          Util.addClass(slideshow.controls[1], "hidden");
        }
        slideshow.controls[0].addEventListener("click", function (event) {
          event.preventDefault();
          slideshow.showPrev();
          updateAriaLive(slideshow);
        });
        slideshow.controls[1].addEventListener("click", function (event) {
          event.preventDefault();
          slideshow.showNext();
          updateAriaLive(slideshow);
        });
      }
      // swipe events
      if (slideshow.options.swipe) {
        //init swipe
        new SwipeContent(slideshow.element);
        slideshow.element.addEventListener("swipeLeft", function (event) {
          slideshow.showNext();
        });
        slideshow.element.addEventListener("swipeRight", function (event) {
          slideshow.showPrev();
        });
      }
      // autoplay
      if (slideshow.options.autoplay) {
        slideshow.startAutoplay();
        // pause autoplay if user is interacting with the slideshow
        if (!slideshow.options.autoplayOnHover) {
          slideshow.element.addEventListener("mouseenter", function (event) {
            slideshow.pauseAutoplay();
            slideshow.autoplayPaused = true;
          });
          slideshow.element.addEventListener("mouseleave", function (event) {
            slideshow.autoplayPaused = false;
            slideshow.startAutoplay();
          });
        }
        if (!slideshow.options.autoplayOnFocus) {
          slideshow.element.addEventListener("focusin", function (event) {
            slideshow.pauseAutoplay();
            slideshow.autoplayPaused = true;
          });
          slideshow.element.addEventListener("focusout", function (event) {
            slideshow.autoplayPaused = false;
            slideshow.startAutoplay();
          });
        }
      }
      // detect if external buttons control the slideshow
      var slideshowId = slideshow.element.getAttribute("id");
      if (slideshowId) {
        var externalControls = document.querySelectorAll(
          '[data-controls="' + slideshowId + '"]',
        );
        for (var i = 0; i < externalControls.length; i++) {
          (function (i) {
            externalControlSlide(slideshow, externalControls[i]);
          })(i);
        }
      }
      // custom event to trigger selection of a new slide element
      slideshow.element.addEventListener("selectNewItem", function (event) {
        // check if slide is already selected
        if (event.detail) {
          if (event.detail - 1 == slideshow.selectedSlide) return;
          showNewItem(slideshow, event.detail - 1, false);
        }
      });

      // keyboard navigation
      slideshow.element.addEventListener("keydown", function (event) {
        if (
          (event.keyCode && event.keyCode == 39) ||
          (event.key && event.key.toLowerCase() == "arrowright")
        ) {
          slideshow.showNext();
        } else if (
          (event.keyCode && event.keyCode == 37) ||
          (event.key && event.key.toLowerCase() == "arrowleft")
        ) {
          slideshow.showPrev();
        }
      });
    }

    function navigateSlide(slideshow, event, keyNav) {
      // user has interacted with the slideshow navigation -> update visible slide
      var target = Util.hasClass(event.target, "js-slideshow__nav-item")
        ? event.target
        : event.target.closest(".js-slideshow__nav-item");
      if (
        keyNav &&
        target &&
        !Util.hasClass(target, "slideshow__nav-item--selected")
      ) {
        slideshow.showItem(Util.getIndexInArray(slideshow.navigation, target));
        slideshow.moveFocus = true;
        updateAriaLive(slideshow);
      }
    }

    function initAnimationEndEvents(slideshow) {
      // remove animation classes at the end of a slide transition
      for (var i = 0; i < slideshow.items.length; i++) {
        (function (i) {
          slideshow.items[i].addEventListener("animationend", function () {
            resetAnimationEnd(slideshow, slideshow.items[i]);
          });
          slideshow.items[i].addEventListener("transitionend", function () {
            resetAnimationEnd(slideshow, slideshow.items[i]);
          });
        })(i);
      }
    }

    function resetAnimationEnd(slideshow, item) {
      setTimeout(function () {
        // add a delay between the end of animation and slideshow reset - improve animation performance
        if (Util.hasClass(item, "slideshow__item--selected")) {
          if (slideshow.moveFocus) Util.moveFocus(item);
          emitSlideshowEvent(
            slideshow,
            "newItemVisible",
            slideshow.selectedSlide,
          );
          slideshow.moveFocus = false;
        }
        Util.removeClass(
          item,
          "slideshow__item--" +
            slideshow.animationType +
            "-out-left slideshow__item--" +
            slideshow.animationType +
            "-out-right slideshow__item--" +
            slideshow.animationType +
            "-in-left slideshow__item--" +
            slideshow.animationType +
            "-in-right",
        );
        item.removeAttribute("aria-hidden");
        slideshow.animating = false;
        Util.removeClass(slideshow.element, slideshow.animatingClass);
      }, 100);
    }

    function showNewItem(slideshow, index, bool) {
      if (slideshow.items.length <= 1) return;
      if (slideshow.animating && slideshow.supportAnimation) return;
      slideshow.animating = true;
      Util.addClass(slideshow.element, slideshow.animatingClass);
      if (index < 0) index = slideshow.items.length - 1;
      else if (index >= slideshow.items.length) index = 0;
      // skip slideshow item if it is hidden
      if (bool && Util.hasClass(slideshow.items[index], "hidden")) {
        slideshow.animating = false;
        index = bool == "next" ? index + 1 : index - 1;
        showNewItem(slideshow, index, bool);
        return;
      }
      // index of new slide is equal to index of slide selected item
      if (index == slideshow.selectedSlide) {
        slideshow.animating = false;
        return;
      }
      var exitItemClass = getExitItemClass(
        slideshow,
        bool,
        slideshow.selectedSlide,
        index,
      );
      var enterItemClass = getEnterItemClass(
        slideshow,
        bool,
        slideshow.selectedSlide,
        index,
      );
      // transition between slides
      if (!slideshow.animationOff)
        Util.addClass(slideshow.items[slideshow.selectedSlide], exitItemClass);
      Util.removeClass(
        slideshow.items[slideshow.selectedSlide],
        "slideshow__item--selected",
      );
      slideshow.items[slideshow.selectedSlide].setAttribute(
        "aria-hidden",
        "true",
      ); //hide to sr element that is exiting the viewport
      if (slideshow.animationOff) {
        Util.addClass(slideshow.items[index], "slideshow__item--selected");
      } else {
        Util.addClass(
          slideshow.items[index],
          enterItemClass + " slideshow__item--selected",
        );
      }
      // reset slider navigation appearance
      resetSlideshowNav(slideshow, index, slideshow.selectedSlide);
      slideshow.selectedSlide = index;
      // reset autoplay
      slideshow.pauseAutoplay();
      slideshow.startAutoplay();
      // reset controls/navigation color themes
      resetSlideshowTheme(slideshow, index);
      // emit event
      emitSlideshowEvent(slideshow, "newItemSelected", slideshow.selectedSlide);
      if (slideshow.animationOff) {
        slideshow.animating = false;
        Util.removeClass(slideshow.element, slideshow.animatingClass);
      }
    }

    function getExitItemClass(slideshow, bool, oldIndex, newIndex) {
      var className = "";
      if (bool) {
        className =
          bool == "next"
            ? "slideshow__item--" + slideshow.animationType + "-out-right"
            : "slideshow__item--" + slideshow.animationType + "-out-left";
      } else {
        className =
          newIndex < oldIndex
            ? "slideshow__item--" + slideshow.animationType + "-out-left"
            : "slideshow__item--" + slideshow.animationType + "-out-right";
      }
      return className;
    }

    function getEnterItemClass(slideshow, bool, oldIndex, newIndex) {
      var className = "";
      if (bool) {
        className =
          bool == "next"
            ? "slideshow__item--" + slideshow.animationType + "-in-right"
            : "slideshow__item--" + slideshow.animationType + "-in-left";
      } else {
        className =
          newIndex < oldIndex
            ? "slideshow__item--" + slideshow.animationType + "-in-left"
            : "slideshow__item--" + slideshow.animationType + "-in-right";
      }
      return className;
    }

    function resetSlideshowNav(slideshow, newIndex, oldIndex) {
      if (slideshow.navigation) {
        Util.removeClass(
          slideshow.navigation[oldIndex],
          "slideshow__nav-item--selected",
        );
        Util.addClass(
          slideshow.navigation[newIndex],
          "slideshow__nav-item--selected",
        );
        slideshow.navCurrentLabel.parentElement.removeChild(
          slideshow.navCurrentLabel,
        );
        slideshow.navigation[newIndex]
          .getElementsByTagName("button")[0]
          .appendChild(slideshow.navCurrentLabel);
      }
    }

    function resetSlideshowTheme(slideshow, newIndex) {
      var dataTheme = slideshow.items[newIndex].getAttribute("data-theme");
      if (dataTheme) {
        if (slideshow.navigation)
          slideshow.navigation[0].parentElement.setAttribute(
            "data-theme",
            dataTheme,
          );
        if (slideshow.controls[0])
          slideshow.controls[0].parentElement.setAttribute(
            "data-theme",
            dataTheme,
          );
      } else {
        if (slideshow.navigation)
          slideshow.navigation[0].parentElement.removeAttribute("data-theme");
        if (slideshow.controls[0])
          slideshow.controls[0].parentElement.removeAttribute("data-theme");
      }
    }

    function emitSlideshowEvent(slideshow, eventName, detail) {
      var event = new CustomEvent(eventName, { detail: detail });
      slideshow.element.dispatchEvent(event);
    }

    function updateAriaLive(slideshow) {
      slideshow.ariaLive.innerHTML =
        "Item " +
        (slideshow.selectedSlide + 1) +
        " of " +
        slideshow.items.length;
    }

    function externalControlSlide(slideshow, button) {
      // control slideshow using external element
      button.addEventListener("click", function (event) {
        var index = button.getAttribute("data-index");
        if (!index || index == slideshow.selectedSlide + 1) return;
        event.preventDefault();
        showNewItem(slideshow, index - 1, false);
      });
    }

    Slideshow.defaults = {
      element: "",
      navigation: true,
      autoplay: false,
      autoplayOnHover: false,
      autoplayOnFocus: false,
      autoplayInterval: 5000,
      navigationItemClass: "slideshow__nav-item",
      navigationClass: "slideshow__navigation",
      swipe: false,
    };

    window.Slideshow = Slideshow;

    //initialize the Slideshow objects
    var slideshows = document.getElementsByClassName("js-slideshow");
    if (slideshows.length > 0) {
      for (var i = 0; i < slideshows.length; i++) {
        (function (i) {
          var navigation =
              slideshows[i].getAttribute("data-navigation") &&
              slideshows[i].getAttribute("data-navigation") == "off"
                ? false
                : true,
            autoplay =
              slideshows[i].getAttribute("data-autoplay") &&
              slideshows[i].getAttribute("data-autoplay") == "on"
                ? true
                : false,
            autoplayOnHover =
              slideshows[i].getAttribute("data-autoplay-hover") &&
              slideshows[i].getAttribute("data-autoplay-hover") == "on"
                ? true
                : false,
            autoplayOnFocus =
              slideshows[i].getAttribute("data-autoplay-focus") &&
              slideshows[i].getAttribute("data-autoplay-focus") == "on"
                ? true
                : false,
            autoplayInterval = slideshows[i].getAttribute(
              "data-autoplay-interval",
            )
              ? slideshows[i].getAttribute("data-autoplay-interval")
              : 5000,
            swipe =
              slideshows[i].getAttribute("data-swipe") &&
              slideshows[i].getAttribute("data-swipe") == "on"
                ? true
                : false,
            navigationItemClass = slideshows[i].getAttribute(
              "data-navigation-item-class",
            )
              ? slideshows[i].getAttribute("data-navigation-item-class")
              : "slideshow__nav-item",
            navigationClass = slideshows[i].getAttribute(
              "data-navigation-class",
            )
              ? slideshows[i].getAttribute("data-navigation-class")
              : "slideshow__navigation";
          new Slideshow({
            element: slideshows[i],
            navigation: navigation,
            autoplay: autoplay,
            autoplayOnHover: autoplayOnHover,
            autoplayOnFocus: autoplayOnFocus,
            autoplayInterval: autoplayInterval,
            swipe: swipe,
            navigationItemClass: navigationItemClass,
            navigationClass: navigationClass,
          });
        })(i);
      }
    }
  })();
  // File#: _3_testimonial-banner
  // Usage: codyhouse.co/license
  (function () {
    var Tbanner = function (element) {
      this.element = element;
      this.slideshowContent = this.element.getElementsByClassName(
        "js-t-banner__content-slideshow",
      );
      this.slideshowBg = this.element.getElementsByClassName(
        "js-t-banner__bg-slideshow",
      );
      this.navControls = this.element.getElementsByClassName(
        "js-slideshow__control",
      );

      initSlideshow(this);
      initBannerNavigation(this);
    };

    function initSlideshow(banner) {
      // init background and content slideshows
      banner.slideshowContentObj = new Slideshow({
        element: banner.slideshowContent[0],
        navigation: false,
      });
      banner.slideshowBgObj = new Slideshow({
        element: banner.slideshowBg[0],
        navigation: false,
      });
    }

    function initBannerNavigation(banner) {
      if (banner.navControls.length < 2) return;
      // use arrows to navigate the slideshow
      banner.navControls[0].addEventListener("click", function () {
        updateSlideshow(banner, "prev");
      });

      banner.navControls[1].addEventListener("click", function () {
        updateSlideshow(banner, "next");
      });
    }

    function updateSlideshow(banner, direction) {
      if (direction == "next") {
        banner.slideshowContentObj.showNext();
        banner.slideshowBgObj.showNext();
      } else {
        banner.slideshowContentObj.showPrev();
        banner.slideshowBgObj.showPrev();
      }
    }

    // init Tbanner obj
    var tBanner = document.getElementsByClassName("js-t-banner");
    if (tBanner.length > 0) {
      for (var i = 0; i < tBanner.length; i++) {
        new Tbanner(tBanner[i]);
      }
    }
  })();
</script>
