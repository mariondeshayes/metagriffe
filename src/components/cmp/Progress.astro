<progress
  aria-hidden="true"
  class="reading-progressbar js-reading-progressbar"
  max="100"
  value="0">
  <div class="reading-progressbar__fallback js-reading-progressbar__fallback">
  </div>
</progress>

<style>
  /* --------------------------------

File#: _1_reading-progressbar
Title: Reading Progress Bar
Descr: A bar indicator displaying the current reading progress
Usage: codyhouse.co/license

-------------------------------- */
  .reading-progressbar {
    position: fixed;
    @apply z-10;
    top: var(--f-header-height);
    left: 0;
    width: 100%;
    height: 5px;
    @apply text-[var(--accent1Color)];
    pointer-events: none;
    display: none;
    transition: -webkit-transform 0.2s;
    transition: transform 0.2s;
    transition:
      transform 0.2s,
      -webkit-transform 0.2s;
  }

  .reading-progressbar--is-out {
    transform: translateY(-100%);
  }

  .reading-progressbar--is-active {
    display: block;
  }

  .reading-progressbar::-webkit-progress-bar {
    background-color: transparent;
  }

  .reading-progressbar::-webkit-progress-value {
    background-color: currentColor;
  }

  .reading-progressbar::-moz-progress-bar {
    background-color: currentColor;
  }

  .reading-progressbar__fallback {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    background-color: currentColor;
  }
</style>
<script>
  if (!Util) function Util() {}

  Util.addClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.add(classList[0]);
    if (classList.length > 1) Util.addClass(el, classList.slice(1).join(" "));
  };

  Util.removeClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.remove(classList[0]);
    if (classList.length > 1)
      Util.removeClass(el, classList.slice(1).join(" "));
  };

  Util.addClass = function (el, className) {
    var classList = className.split(" ");
    el.classList.add(classList[0]);
    if (classList.length > 1) Util.addClass(el, classList.slice(1).join(" "));
  };

  Util.toggleClass = function (el, className, bool) {
    if (bool) Util.addClass(el, className);
    else Util.removeClass(el, className);
  };

  // File#: _1_reading-progressbar
  // Usage: codyhouse.co/license
  (function () {
    var readingIndicator = document.getElementsByClassName(
        "js-reading-progressbar",
      )[0],
      readingIndicatorContent =
        document.getElementsByClassName("js-reading-content")[0];

    if (readingIndicator && readingIndicatorContent) {
      var progressInfo = [],
        progressEvent = false,
        progressFallback = readingIndicator.getElementsByClassName(
          "js-reading-progressbar__fallback",
        )[0],
        progressIsSupported = "value" in readingIndicator;

      var boundingClientRect = readingIndicatorContent.getBoundingClientRect();

      progressInfo["height"] = readingIndicatorContent.offsetHeight;
      progressInfo["top"] = boundingClientRect.top;
      progressInfo["bottom"] = boundingClientRect.bottom;
      progressInfo["window"] = window.innerHeight;
      progressInfo["class"] = "reading-progressbar--is-active";
      progressInfo["hideClass"] = "reading-progressbar--is-out";

      //init indicator
      setProgressIndicator();
      // wait for font to be loaded - reset progress bar
      if (document.fonts) {
        document.fonts.ready.then(function () {
          triggerReset();
        });
      }
      // listen to window resize - update progress
      window.addEventListener("resize", function (event) {
        triggerReset();
      });

      //listen to the window scroll event - update progress
      window.addEventListener("scroll", function (event) {
        if (progressEvent) return;
        progressEvent = true;
        !window.requestAnimationFrame
          ? setTimeout(function () {
              setProgressIndicator();
            }, 250)
          : window.requestAnimationFrame(setProgressIndicator);
      });

      function setProgressIndicator() {
        var boundingClientRect =
          readingIndicatorContent.getBoundingClientRect();
        progressInfo["top"] = boundingClientRect.top;
        progressInfo["bottom"] = boundingClientRect.bottom;

        if (progressInfo["height"] <= progressInfo["window"]) {
          // short content - hide progress indicator
          Util.removeClass(readingIndicator, progressInfo["class"]);
          progressEvent = false;
          return;
        }
        // get new progress and update element
        Util.addClass(readingIndicator, progressInfo["class"]);
        var value =
          progressInfo["top"] >= 0
            ? 0
            : (100 * (0 - progressInfo["top"])) /
              (progressInfo["height"] - progressInfo["window"]);
        readingIndicator.setAttribute("value", value);
        if (!progressIsSupported && progressFallback)
          progressFallback.style.width = value + "%";
        // hide progress bar when target is outside the viewport
        Util.toggleClass(
          readingIndicator,
          progressInfo["hideClass"],
          progressInfo["bottom"] <= 0,
        );
        progressEvent = false;
      }

      function triggerReset() {
        if (progressEvent) return;
        progressEvent = true;
        !window.requestAnimationFrame
          ? setTimeout(function () {
              resetProgressIndicator();
            }, 250)
          : window.requestAnimationFrame(resetProgressIndicator);
      }

      function resetProgressIndicator() {
        progressInfo["height"] = readingIndicatorContent.offsetHeight;
        progressInfo["window"] = window.innerHeight;
        setProgressIndicator();
      }
    }
  })();
</script>
