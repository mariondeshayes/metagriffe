---
const { node } = Astro.props;
const pathname = Astro.url.pathname;
let placeholder = "Comment puis-je vous aider ?";
---

<section class="px-4 my-16 max-w-7xl mx-auto">
  <form netlify method="POST" name={pathname} data-success={node.success}>
    <div class="flex flex-col">
      <div class="row flex flex-col md:flex-row">
        <label>
          <span>{node.prenom.label}</span>
          <input
            type="text"
            name="Prénom"
            placeholder={node.prenom.placeholder}
            required
          />
        </label>
        <label>
          <span>{node.nom.label}</span>
          <input
            type="text"
            name="Nom"
            placeholder={node.nom.placeholder}
            required
          />
        </label>
      </div>
      <div class="row flex flex-col md:flex-row">
        <label>
          <span>{node.societe.label}</span>
          <input
            type="text"
            name="Société"
            placeholder={node.societe.placeholder}
          />
        </label>
        <label>
          <span>{node.email.label}</span>
          <input
            type="email"
            name="Email"
            placeholder={node.email.placeholder}
            required
          />
        </label>
      </div>
      <div class="row">
        <label class="textarea" data-placeholder={node.message.placeholder}>
          <span>{node.message.label}</span>
          <textarea name="message" rows="15"></textarea>
        </label>
      </div>
      <div class="row">
        <label class="rgpd">
          <span class="w-full" set:html={node.rgpd} />
          <div class="custom-checkbox mr-4">
            <input
              class="custom-checkbox__input"
              type="checkbox"
              aria-label="Checkbox label"
              required
            />
            <div class="custom-checkbox__control" aria-hidden="true"></div>
          </div>
        </label>
      </div>
      <button class="btn btn-form mr-0 ml-auto" type="submit">
        {node.btn}
      </button>
    </div>
  </form>
</section>

<script>
  //Handle the placeholder of the textarea in js since prettier mess up the code
  const textarea = document.querySelector("textarea");
  const textareaLabel = document.querySelector("label.textarea");
  if (textarea) {
    textarea.placeholder = textareaLabel.dataset.placeholder;
  }

  //Show the success message when the form is successfully send
  const onSubmit = (event) => {
    event.preventDefault();

    const myForm = event.target;
    const formData = new FormData(myForm);

    fetch("/", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams(formData).toString(),
    })
      .then(() => alert(myForm.dataset.success))
      .then(myForm.reset())

      .catch((error) => alert(error));
  };

  if (document.querySelector("form")) {
    document.querySelector("form").addEventListener("submit", onSubmit);
  }
</script>

<style>
  .btn-form {
    box-shadow:
      4px 0 0 0 var(--textColor),
      0 4px 0 0 var(--textColor),
      4px 4px 0 0 var(--textColor),
      /* Just to fix the corner */ 4px 0 0 0 var(--textColor) inset,
      0 4px 0 0 var(--textColor) inset;
  }

  label {
    @apply flex justify-center items-center uppercase font-extrabold;
    box-shadow:
      4px 0 0 0 var(--textColor),
      0 4px 0 0 var(--textColor),
      4px 4px 0 0 var(--textColor),
      /* Just to fix the corner */ 4px 0 0 0 var(--textColor) inset,
      0 4px 0 0 var(--textColor) inset;
  }

  label:not(.textarea):not(.rgpd) {
    @apply w-full md:w-1/2  h-[64px] box-border flex-col xs:flex-row py-4;
  }

  label:not(.textarea):not(.rgpd) > span {
    @apply pl-4 w-[35%] mr-0 md:mr-4 inline-block;
  }

  label.textarea {
    @apply w-full flex flex-col md:flex-row;
  }

  label.textarea > span {
    @apply py-8 mx-4;
  }

  textarea {
    @apply p-4;
    background-color: var(--bgColor);
    box-shadow:
      4px 0 0 0 var(--textColor),
      0 4px 0 0 var(--textColor),
      4px 4px 0 0 var(--textColor),
      /* Just to fix the corner */ 4px 0 0 0 var(--textColor) inset,
      0 4px 0 0 var(--textColor) inset;
    @apply w-full h-full outline-none;
  }

  input {
    background-color: var(--bgColor);
    @apply px-2 py-1 w-[calc(100%-10px)] md:w-[70%] h-[calc(100%-10px)] outline-none;
  }

  label.rgpd {
    @apply w-full;
  }

  label.rgpd > span {
    @apply w-[90%] p-4 font-light;
  }

  input::placeholder,
  textarea::placeholder {
    font-weight: 400;
    @apply p-2;
  }

  /* --------------------------------

File#: _1_custom-checkbox
Title: Custom Checkbox
Descr: Replace the native checkbox button with a custom element (e.g., an icon)
Usage: codyhouse.co/license

-------------------------------- */
  :root {
    --custom-checkbox-size: 20px;
    --custom-checkbox-radius: 4px;
    --custom-checkbox-border-width: 1px;
    --custom-checkbox-marker-size: 18px;
  }

  .custom-checkbox {
    position: relative;
    z-index: 1;
    display: inline-block;
    font-size: var(--custom-checkbox-size);
  }

  .custom-checkbox__input {
    position: relative;
    /* hide native input */
    margin: 0;
    padding: 0;
    opacity: 0;
    height: 1em;
    width: 1em;
    display: block;
    z-index: 1;
  }

  .custom-checkbox__control {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: -1;
    pointer-events: none;
    transition: -webkit-transform 0.2s;
    transition: transform 0.2s;
    transition:
      transform 0.2s,
      -webkit-transform 0.2s;
    @apply text-[var(--accent1Color)];
    /* unchecked color */
  }
  .custom-checkbox__control::before,
  .custom-checkbox__control::after {
    content: "";
    position: absolute;
  }
  .custom-checkbox__control::before {
    /* focus circle */
    width: 160%;
    height: 160%;
    background-color: var(--accent1Color);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    opacity: 0;
    border-radius: 50%;
    will-change: transform;
    transition: -webkit-transform 0.2s;
    transition: transform 0.2s;
    transition:
      transform 0.2s,
      -webkit-transform 0.2s;
  }
  .custom-checkbox__control::after {
    /* custom checkbox */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* custom checkbox style */
    @apply bg-[var(--bgColor)];
    border-radius: var(--custom-checkbox-radius);
    box-shadow:
      inset 0 0 0 var(--custom-checkbox-border-width) currentColor,
      0 0.1px 0.3px rgba(0, 0, 0, 0.06),
      0 1px 2px rgba(0, 0, 0, 0.12);
    /* border */
  }

  .custom-checkbox__input:checked ~ .custom-checkbox__control::after,
  .custom-checkbox__input:indeterminate ~ .custom-checkbox__control::after {
    background-color: currentColor;
    background-repeat: no-repeat;
    background-position: center;
    background-size: var(--custom-checkbox-marker-size);
    box-shadow: none;
  }

  .custom-checkbox__input:checked ~ .custom-checkbox__control {
    @apply text-[var(accent1Color)];
    /* checked color */
  }
  .custom-checkbox__input:checked ~ .custom-checkbox__control::after {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpolyline points='2.5 8 6.5 12 13.5 3' fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5'/%3E%3C/svg%3E");
  }

  .custom-checkbox__input:indeterminate ~ .custom-checkbox__control::after {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cline x1='2' y1='8' x2='14' y2='8' fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'/%3E%3C/svg%3E");
  }

  .custom-checkbox__input:active ~ .custom-checkbox__control {
    transform: scale(0.9);
  }

  .custom-checkbox__input:checked:active ~ .custom-checkbox__control,
  .custom-checkbox__input:indeterminate:active ~ .custom-checkbox__control {
    transform: scale(1);
  }

  .custom-checkbox__input:focus ~ .custom-checkbox__control::before {
    opacity: 0.2;
    transform: translate(-50%, -50%) scale(1);
  }

  /* --icon */
  .custom-checkbox--icon {
    --custom-checkbox-size: 32px;
  }
  .custom-checkbox--icon .custom-checkbox__control::after {
    display: none;
  }
  .custom-checkbox--icon .icon {
    display: block;
    color: inherit;
    position: relative;
    z-index: 1;
  }
</style>
